#!/bin/bash

# vim command
if command -v vim &> /dev/null; then
    alias vi=vim
elif command -v hx &> /dev/null; then
    alias vi=hx
# else
#   echo "'hx', 'vim' command is not installed"
fi

alias e="$EDITOR"
alias v="$VISUAL"

if command -v curl &> /dev/null; then
    # neofetch alternative
    # from: https://itsfoss.com/neofetch-alternatives/
    nerdfetch() {
        curl -fsSL https://raw.githubusercontent.com/ThatOneCalculator/NerdFetch/main/nerdfetch | sh -s -- ${1:--c}
    }
    # curl -fsSL https://raw.githubusercontent.com/ThatOneCalculator/NerdFetch/main/nerdfetch | sh
    # nerdfetch
    # alias nerdfetch=nerdfetch
    # alias neofetch=nerdfetch
fi

# tldr command -> cht
if command -v tldr &> /dev/null; then
    alias man='tldr'
elif command -v cht.sh &>/dev/null; then
    alias man='cht.sh'
elif command -v curl &>/dev/null; then
    function cht() {
        curl cht.sh/$1 # https://github.com/chubin/cheat.sh
    }
    alias man=cht
# else
#     echo "'tldr' command is not installed"
fi

# trash command
if command -v trash &> /dev/null; then
    alias rm='trash -v'
    alias rm-list='trash-list'
# else
#   echo "'trash' command is not installed"
fi 

# trash command
if command -v btop &> /dev/null; then
    alias top='btop'
elif command -v htop &>/dev/null; then
    alias top='htop'
# else
#   echo "'trash' command is not installed"
fi

# bat
if command -v batcat &>/dev/null; then
    alias bat='batcat'
fi
# duf
if command -v duf &>/dev/null; then
    alias df='duf'
fi
# dust
if command -v dust &>/dev/null; then
    alias du='dust'
fi

# Modern ls alternatives with enhanced features
if command -v exa &>/dev/null; then
    alias ls='exa --icons --group-directories-first'
    alias l='exa --icons --long --all --group-directories-first'           # -lah equivalent
    alias la='exa --icons --long --all --group-directories-first'          # -lAh equivalent (exa doesn't show . and .. by default)
    alias ll='exa --icons --long --group-directories-first'                # -lh equivalent
    alias lsa='exa --icons --long --all --group-directories-first'         # same as l
    alias tree='exa --tree --icons'
elif command -v lsd &>/dev/null; then
    alias ls='lsd --group-dirs=first'
    # alias l='lsd --long --all --group-dirs=first'                          # -lah equivalent
    alias l='lsd --long --almost-all --group-dirs=first'                          # -lah equivalent
    alias la='lsd --long --almost-all --group-dirs=first'                  # -lAh equivalent
    alias ll='lsd --long --group-dirs=first'                               # -lh equivalent  
    alias lsa='lsd --long --all --group-dirs=first'                        # same as l
    alias tree='lsd --tree'
else
    # # Fallback to regular ls with colors
    # if [[ "$OSTYPE" == "darwin"* ]]; then
    #     alias ls='ls -G'
    # elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    #     alias ls='ls --color=auto'
    # fi
    # alias l='ls -lah'
    # alias la='ls -lAh' 
    # alias ll='ls -lh'
    # alias lsa='ls -lah'
fi

# thefuck command
if command -v thefuck &>/dev/null; then
    eval $(thefuck --alias)
# else
    # echo "'thefuck' command is not installed"
fi

# fd
if command -v fdfind &>/dev/null; then
    alias fd='fdfind -aI'
    alias find=fd
fi



#! alias 등록하려고 했으나 cd했을 때 $HOME으로 안감.
# 추후 수정하거나 그냥 alias 등록하지 않는 것으로 해야할 듯
# if command -v z &>/dev/null; then
#   alias cd=z
# fi


# Function to execute a command on a remote host via SSH
function remote_exec() {
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: remote_exec [user] [remote_host] [ssh_option] <command>"
        echo "  user        - SSH username (default: ubuntu)"
        echo "  remote_host - Remote host address (default: localhost)"
        echo "  ssh_option  - SSH option (default: -t)"
        echo "  command     - Command to execute on the remote host"
        return 0
    fi

    local user=${1:-ubuntu}
    local remote_host=${2:-localhost}
    local ssh_option=${3:--t}
    shift 3
    local command="$@"

    if [[ -z "$command" ]]; then
        echo "Error: Missing required arguments."
        echo "Usage: remote_exec [user] [remote_host] [ssh_option] <command>"
        return 1
    fi

    ssh "${ssh_option}" "${user}@${remote_host}" "${command}"
}

